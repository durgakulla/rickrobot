<html>
    <head>
        <title>Ricochet Robots</title>
        <link rel="stylesheet" type="text/css" href="/client/style.css">
        <script src="jquery-3.4.1.min.js"></script>
    </head>
    <body>

        <!-- Ask for username to display in the chat -->
        <div id="login-wrap">
            <br><br><br>
            <form id="login-form">
                <label for="nme"><span>Enter a display name.</span></label><br>
                <input autofocus maxlength="12" type="text" name="name" class="question" id="name-input" required autocomplete="off" />
                <input type="submit" value="Play">
            </form>
        </div>

        <!-- display the canvas and chatbox -->
        <div id="game-wrap" style="width:800;display:none;margin: 0 auto; margin-top: 0;">
            <div id="center" style="width:800;margin: 0 auto;"><a href="/"><img style="position:relative; left:70;" width="400px" src="/client/logo.jpg"/></a></div>
            <div id="canvas-wrap" style="width: 540;height: 540;position: relative;top: 0;right: 0;">
                <canvas id="ctx" width="540" height="540" style="display:inline;"></canvas>
            </div>
            <div id="chat-wrap" style="outline: 2px white black;outline-offset: -2px;width:300px;height:540px;position:relative; left:540; bottom:540;">
                <div id="chat-text" style="width:100%;height:480px;overflow-y:scroll;display: flex;flex-direction: column-reverse;">
                </div>
                <form id="chat-form" style="">
                    <input id="chat-input" class="question" type="text" style="width:300px;height:50px;border-top: 2px white black;z-index: -1000;" placeholder="Type a message..."></input>
                </form>
                <button type="button" id="reset-pieces">Reset Pieces</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button type="button" id="new-game">New Level</button>
            </div>
        </div>

        <!-- the following scripts control client game rendering -->
        <script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
        <script>
            //load some images
            const border = new Image();
            border.src = '/client/border.png';
            const wall = new Image();
            wall.src = '/client/wall.png';
            const tile = new Image();
            tile.src = '/client/tile.png';
            const redpiece = new Image();
            redpiece.src = '/client/red.png';
            const greenpiece = new Image();
            greenpiece.src = '/client/green.png';
            const bluepiece = new Image();
            bluepiece.src = '/client/blue.png';
            const yellowpiece = new Image();
            yellowpiece.src = '/client/yellow.png';

            //read in form inputs and html/canvas elements
            var loginWrap = document.getElementById("login-wrap");
            var gameWrap = document.getElementById("game-wrap");
            var loginForm = document.getElementById('login-form');
            var nameInput = document.getElementById('name-input');
            var chatText = document.getElementById('chat-text');
            var chatInput = document.getElementById('chat-input');
            var chatForm = document.getElementById('chat-form');
            var canvas = document.getElementById("ctx");
            var ctx = document.getElementById("ctx").getContext("2d");
            var clientname;
            //TODO: this is NOT the best way to get roomid. Improve!
            var roomid = window.location.pathname.split('id-').pop();
            var loaded = false;

            //start socket
            var socket = io({transports: ['websocket'], upgrade: false});

            //when a user provides their displayname, send to server
            //also send the server the roomid of the room user is joining
            loginForm.onsubmit = function(e){
                e.preventDefault();
                clientname = nameInput.value;
                socket.emit('sendRoomidToServer',roomid);
                socket.emit('sendDisplaynameToServer',[nameInput.value]);
            }

            //Server tells client to showboard after user submits their display name
            socket.on('showBoard',function(){
                loginWrap.style.display = "none";
                gameWrap.style.display = "block";
                loaded = true;
            });

            //Send a chat message to the server
            chatForm.onsubmit = function(e){
                e.preventDefault();
                if(chatInput.value[0] === '/')
                    socket.emit('evalServer',chatInput.value.slice(1));
                else
                    socket.emit('sendMsgToServer',chatInput.value);
                chatInput.value = '';
            }

            //Server tells client to display a chat message the room received
            socket.on('addToChat',function(data){
                if(data.includes(clientname+"</span>:")){
                    chatText.innerHTML = "<div id='this-player'>" + data + '</div>' + chatText.innerHTML;
                }
                else{
                    chatText.innerHTML = '<div>' + data + '</div>' + chatText.innerHTML;
                }
            });
            socket.on('addToChatServer',function(data){
                chatText.innerHTML = "<div id='server-message'>" + data + '</div>' + chatText.innerHTML;
            });

            //Tell server a keypress occurred, only if the user isn't using the chat
            document.onkeydown = function(event){
                if(document.activeElement.tagName != 'INPUT'){
                    if(event.keyCode === 39)    //arrow right
                        socket.emit('keyPress',{roomid: roomid, inputId:'right',state:true});
                    else if(event.keyCode === 40)   //arrow down
                        socket.emit('keyPress',{roomid: roomid, inputId:'down',state:true});
                    else if(event.keyCode === 37) //arrow left
                        socket.emit('keyPress',{roomid: roomid, inputId:'left',state:true});
                    else if(event.keyCode === 38) // arrow up
                        socket.emit('keyPress',{roomid: roomid, inputId:'up',state:true});
                    else if(event.keyCode === 49) // 1
                        socket.emit('keyPress',{roomid: roomid, inputId:'one',state:true});
                    else if(event.keyCode === 50) // 2
                        socket.emit('keyPress',{roomid: roomid, inputId:'two',state:true});
                    else if(event.keyCode === 51) // 3
                        socket.emit('keyPress',{roomid: roomid, inputId:'three',state:true});
                    else if(event.keyCode === 52) // 4
                        socket.emit('keyPress',{roomid: roomid, inputId:'four',state:true});
                }
            }
            //Tell server a keypress has ended, only if the user isn't using the chat
            document.onkeyup = function(event){
                if(document.activeElement.tagName != 'INPUT'){
                    if(event.keyCode === 39)    //arrow right
                        socket.emit('keyPress',{roomid: roomid, inputId:'right',state:false});
                    else if(event.keyCode === 40)   //arrow down
                        socket.emit('keyPress',{roomid: roomid, inputId:'down',state:false});
                    else if(event.keyCode === 37) //arrow left
                        socket.emit('keyPress',{roomid: roomid, inputId:'left',state:false});
                    else if(event.keyCode === 38) // arrow up
                        socket.emit('keyPress',{roomid: roomid, inputId:'up',state:false});
                    else if(event.keyCode === 49) // 1
                        socket.emit('keyPress',{roomid: roomid, inputId:'one',state:false});
                    else if(event.keyCode === 50) // 2
                        socket.emit('keyPress',{roomid: roomid, inputId:'two',state:false});
                    else if(event.keyCode === 51) // 3
                        socket.emit('keyPress',{roomid: roomid, inputId:'three',state:false});
                    else if(event.keyCode === 52) // 4
                        socket.emit('keyPress',{roomid: roomid, inputId:'four',state:false});
                }
            }

            socket.on('gameUpdate',function(games){
                if(loaded){
                    game = games[roomid];
                    const squareSize = 30;
                    //position of board's top left.
                    const boardTopx = 0;
                    const boardTopy = 0;
                    //draw the outside walls
                    for(let i=0; i<game.board.length; i++) {
                        for(let j=0; j<game.board[0].length; j++) {
                            let xOffset = boardTopx + j*squareSize;
                            let yOffset = boardTopy + i*squareSize;
                            ctx.lineWidth = 1.5;
                            if(game.board[i][j] === 9){
                                ctx.fillStyle = "black";
                                ctx.drawImage(border,xOffset, yOffset, squareSize, squareSize);
                            }
                            else{
                                ctx.fillStyle = "white";
                                ctx.strokeStyle = "#D0D0D0";
                                ctx.strokeRect(xOffset, yOffset, squareSize, squareSize);
                                ctx.drawImage(tile,xOffset, yOffset, squareSize, squareSize);
                            }
                        }
                    }
                    //draw the walls
                    for(let i=0; i<game.board.length; i++) {
                        for(let j=0; j<game.board[0].length; j++) {
                            let xOffset = boardTopx + j*squareSize;
                            let yOffset = boardTopy + i*squareSize;

                            ctx.fillStyle = "black";
                            if(game.board[i][j] === 1){
                                ctx.drawImage(wall, xOffset-3, yOffset-3, squareSize+6, squareSize/5);
                            }
                            else if(game.board[i][j] === 2){
                                ctx.drawImage(wall, xOffset+(squareSize-3), yOffset-3, squareSize/5, squareSize+6);
                            }
                            else if(game.board[i][j] === 3){
                                ctx.drawImage(wall, xOffset-3, yOffset+(squareSize-3), squareSize+6, squareSize/5);
                            }
                            else if(game.board[i][j] === 4){
                                ctx.drawImage(wall, xOffset-3, yOffset-3, squareSize/5, squareSize+6);
                            }
                        }
                    }
                    //draw the center piece
                    ctx.fillRect(boardTopx+8*squareSize, boardTopy+8*squareSize, squareSize*2, squareSize*2);
                    //draw the border around the board
                    ctx.lineWidth = 4;
                    ctx.strokeStyle = "black";
                    ctx.strokeRect(boardTopx+squareSize-ctx.lineWidth/2, boardTopy+squareSize-ctx.lineWidth/2, squareSize*game.board.length-squareSize*2+ctx.lineWidth, squareSize*game.board.length-squareSize*2+ctx.lineWidth)
                    //draw the goal. bigger size is smaller.
                    goalsize = 1.5;
                    ctx.fillStyle = game.goalColorPosition.color;
                    ctx.globalAlpha = 0.6;
                    ctx.fillRect(boardTopx+game.goalColorPosition.position[1]*squareSize+((squareSize-squareSize/goalsize)/2), boardTopy+game.goalColorPosition.position[0]*squareSize+((squareSize-squareSize/goalsize)/2), squareSize/goalsize, squareSize/goalsize);
                    ctx.globalAlpha = 1.0;
                    //draw each game piece
                    for(piece in game.piecePositions){
                        let yOffset = boardTopy + game.piecePositions[piece][0]*squareSize;
                        let xOffset = boardTopx + game.piecePositions[piece][1]*squareSize;
                        if(piece =='red'){
                            ctx.drawImage(redpiece, xOffset+squareSize/6, yOffset+squareSize/6, squareSize/1.5, squareSize/1.5);
                        }
                        else if(piece =='green'){
                            ctx.drawImage(greenpiece, xOffset+squareSize/6, yOffset+squareSize/6, squareSize/1.5, squareSize/1.5);
                        }
                        else if(piece =='blue'){
                            ctx.drawImage(bluepiece, xOffset+squareSize/6, yOffset+squareSize/6, squareSize/1.5, squareSize/1.5);
                        }
                        else if(piece =='yellow'){
                            ctx.drawImage(yellowpiece, xOffset+squareSize/6, yOffset+squareSize/6, squareSize/1.5, squareSize/1.5);
                        }
                        else if(piece =='black'){
                            ctx.fillStyle = piece;
                            ctx.drawImage(border,xOffset, yOffset, squareSize, squareSize);
                        }
                    }
                }



            //when button is pressed, tell server to move pieces back to starting position
            var resetbutton = document.getElementById('reset-pieces');
            resetbutton.onclick = function(){
                 socket.emit('resetPieces',roomid);
            }
            //when button is pressed, tell server to serve a new level
            var newgamebutton = document.getElementById('new-game');
            newgamebutton.onclick = function(){
                 socket.emit('newLevel',roomid);
            }

            }), 1000;

        </script>
    </body>
</html>
